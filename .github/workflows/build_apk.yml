name: Build and Release APK

on:
  push:
    branches: [ '**' ]

jobs:
  build:
    runs-on: ubuntu-latest  # 使用GitHub提供的Linux虚拟机
    permissions:
      contents: write  # 允许上传Release

    steps:
    # 1. 拉取代码到虚拟机
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. 设置Java环境
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # 3. 用Gradle构建APK（未签名）
    - name: Build Release APK
      uses: gradle/gradle-build-action@v2
      with:
        arguments: assembleRelease  # 执行Gradle的release构建任务
    - name: Verify Keystore Alias
      run: |
        echo "${{ secrets.SIGNING_KEY }}" | base64 -d > temp.jks
        keytool -list -v -keystore temp.jks -storepass "${{ secrets.KEY_STORE_PASSWORD }}"

    # 4. 签名APK（使用Secrets中的密钥）
    - name: Sign APK
      uses: r0adkll/sign-android-release@v1
      id: sign_app  # 为后续步骤引用结果
      with:
        releaseDirectory: app/build/outputs/apk/release  # Gradle输出目录
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}     # Base64密钥
        alias: ${{ secrets.ALIAS }}                      # 密钥别名
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }} # 密钥库密码
        keyPassword: ${{ secrets.KEY_PASSWORD }}          # 别名密码

    # 5. 重命名APK（包含版本标签）
    - name: Rename APK
      run: |
        mv "${{ steps.sign_app.outputs.signedReleaseFile }}" \
        myapp_$GITHUB_REF_NAME.apk  # 例如myapp_v1.0.apk

    # 6. 发布到GitHub Releases
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: '*.apk'  # 上传所有APK
        token: ${{ github.token }}  # GitHub自动生成的临时令牌
        tag: ${{ github.ref_name }}  # 使用触发构建的标签（如v1.0）
        generateReleaseNotes: true  # 自动生成更新日志
